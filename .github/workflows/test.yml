# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: TEST get UP-FRONT & Hello!Project YouTube view count

env:
  ACCESS_TOKEN: ${{secrets.ACCESS_TOKEN}}
  ACCESS_TOKEN_SECRET: ${{secrets.ACCESS_TOKEN_SECRET}}
  API_KEY: ${{secrets.API_KEY}}
  API_SECRET: ${{secrets.API_SECRET}}
  YTV3_API_KEY: ${{secrets.YTV3_API_KEY}}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DEBUG: YES
  FIREBASE_CREDENTIAL: ${{ secrets.FIREBASE_CREDENTIAL }}
  TZ: 'Asia/Tokyo'

permissions:
  contents: read
  issues: write

on:
  push:
    branches: [ test ]

jobs:
  job:
    timeout-minutes: 15

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Install Chromium & driver
        run: sudo apt install chromium-chromedriver
      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv install
      - id: auto-run
        name: get today data
        run: |
          pipenv run auto-run 2>&1 | tee ./out.txt
        continue-on-error: true

          #      - name: push updates
          #        run: |
          #          git remote set-url origin https://github-actions:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}
          #          git config --global user.name "${GITHUB_ACTOR}"
          #          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          #          if (git diff --shortstat | grep '[0-9]'); then \
          #            git add save.sqlite save.xlsx; \
          #            git commit -m "Daily updates"; \
          #            git push origin HEAD:${GITHUB_REF}; \
          #          fi



      - name: Add debug info
        run: |
          pipenv run post-processing

      - name: Error Handling
        if: steps.auto-run.outcome == 'failure'
        run: |
          pipenv run post-processing
          exit 1
      
